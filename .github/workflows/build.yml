name: build

on:
  pull_request:
    paths-ignore:
      - '**.md'
      - '*.txt'
  push:
    paths-ignore:
      - '**.md'
      - '*.txt'

jobs:
  windows_gcc:
    name: ${{ matrix.config }} Windows ${{ matrix.arch }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x86_64]
        cc: [gcc]
        config: [Release]
        include:
          - arch: x86
            msystem: MINGW32
            prefix: mingw-w64-i686
          - arch: x86_64
            msystem: MINGW64
            prefix: mingw-w64-x86_64
          - config: Release
            rule: install

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - uses: msys2/setup-msys2@v2
      with:
        install: ${{ matrix.prefix }}-binutils ${{ matrix.prefix }}-make ${{ matrix.prefix }}-${{ matrix.cc }}
        msystem: ${{ matrix.msystem }}
        path-type: minimal
        release: false
        update: false

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build
      run: |
        make ${{ matrix.rule }} -j 8 ARCH=${{ matrix.arch }} CC=${{ matrix.cc }} DESTDIR=bin USE_RENDERER_DLOPEN=0 USE_SDL=0 USE_VULKAN=1 CNAME=quake3e-vulkan BUILD_SERVER=0
        make clean ARCH=${{ matrix.arch }}
        make ${{ matrix.rule }} -j 8 ARCH=${{ matrix.arch }} CC=${{ matrix.cc }} DESTDIR=bin USE_RENDERER_DLOPEN=0 USE_SDL=0 USE_VULKAN_API=0

    - uses: actions/upload-artifact@v2
      if: matrix.cc == 'gcc' && matrix.config == 'Release'
      with:
        name: windows-${{ matrix.arch }}
        path: bin
        if-no-files-found: error
        retention-days: 5
        
  ubuntu:
    name: ${{ matrix.config }} Ubuntu ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x86_64]
        cc: [gcc]
        config: [Release]
        include:
          - config: Release
            rule: install

    steps:
    - name: Install tools
      run: |
        if [ ${{ matrix.arch }} == "x86" ]; then
          sudo dpkg --add-architecture i386
          sudo apt-get -qq update
          sudo apt-get -y install gcc-multilib libcurl4-openssl-dev:i386 mesa-common-dev:i386 libxxf86dga-dev:i386 libxrandr-dev:i386 libxxf86vm-dev:i386 libasound-dev:i386
        else
          sudo apt-get -qq update
          sudo apt-get -y install libcurl4-openssl-dev mesa-common-dev libxxf86dga-dev libxrandr-dev libxxf86vm-dev libasound-dev
        fi

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build
      run: |
        make ${{ matrix.rule }} -j 8 ARCH=${{ matrix.arch }} CC=${{ matrix.cc }} DESTDIR=bin USE_RENDERER_DLOPEN=0 USE_SDL=0 USE_VULKAN=1 CNAME=quake3e-vulkan BUILD_SERVER=0
        make clean ARCH=${{ matrix.arch }} 
        make ${{ matrix.rule }} -j 8 ARCH=${{ matrix.arch }} CC=${{ matrix.cc }} DESTDIR=bin USE_RENDERER_DLOPEN=0 USE_SDL=0 USE_VULKAN_API=0

    - uses: actions/upload-artifact@v2
      if: matrix.cc == 'gcc' && matrix.config == 'Release'
      with:
        name: linux-${{ matrix.arch }}
        path: bin
        if-no-files-found: error
        retention-days: 5

  macos:
    name: ${{ matrix.config }} macOS x86_64
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64]
        cc: [clang]
        config: [Release]
        include:
          - config: Release
            rule: install

    steps:
    - name: Install tools
      run: brew install coreutils sdl2

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build
      run: |
        make ${{ matrix.rule }} -j 4 CC=${{ matrix.cc }} DESTDIR=bin INSTALL=ginstall USE_RENDERER_DLOPEN=0 USE_VULKAN=1 CNAME=quake3e-vulkan BUILD_SERVER=0
        make clean ARCH=${{ matrix.arch }} 
        make ${{ matrix.rule }} -j 4 CC=${{ matrix.cc }} DESTDIR=bin INSTALL=ginstall USE_RENDERER_DLOPEN=0 USE_VULKAN_API=0

    - uses: actions/upload-artifact@v2
      if: matrix.cc == 'clang' && matrix.config == 'Release'
      with:
        name: macos-${{ matrix.arch }}
        path: bin
        if-no-files-found: error
        retention-days: 5

  create-release:
    needs: [ubuntu, macos, windows_gcc]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Create binary archives
        run: |
          7z a -r quake3e-linux-x86.zip      ./linux-x86/*
          7z a -r quake3e-linux-x86_64.zip   ./linux-x86_64/*
          7z a -r quake3e-windows-x86.zip    ./windows-x86/*
          7z a -r quake3e-windows-x86_64.zip ./windows-x86_64/*
          7z a -r quake3e-macos-x86_64.zip   ./macos-x86_64/*

      - name: Create latest build
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: "latest"
          prerelease: true
          title: Latest Build
          files: |
            *.zip